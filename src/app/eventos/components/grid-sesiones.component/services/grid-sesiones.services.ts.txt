import { inject, Injectable } from '@angular/core';

import { firstValueFrom } from 'rxjs';


import { v4 as uuidv4 } from 'uuid';
import { GraphQLService } from '../../../../shared/services/graphql.service';
import { GraphQLResponse } from '../../../../shared/interfaces/graphql-response.interface';
import { AuthService } from '../../../../shared/services/auth.service';



interface SesionDTO {
  id_actividad: string | null | undefined;
  fecha_sesion: string;
  hora_inicio: string;
  hora_fin: string;
  id_sesion?: string;
  id_creado_por?: string;
  id_modificado_por?: string;
}

@Injectable({
  providedIn: 'root'
})
export class GridSesionesService {

  private graphQLService = inject(GraphQLService);
  private authService = inject(AuthService);

  /**
   * üì§ Env√≠a cambios de sesiones al backend
   * @param payload Objeto con estructura:
   * {
   *   sesiones: {
   *     nuevos: [...],
   *     modificados: [...],
   *     eliminados: [...]
   *   }
   * }
   */
  async guardarCambiosSesiones(payload: {
    eliminados: { id_sesion: string }[];
    modificados: SesionDTO[];
    nuevos: SesionDTO[];
  }): Promise<GraphQLResponse<{ exitoso: string; mensaje?: string }>> {
    console.log('üì§ Payload de sesiones al back:', payload);

    const { nuevos, modificados, eliminados } = payload;


    const createWithUUID = nuevos.map((s) => ({
      ...s,
      id_sesion: uuidv4(),
      id_creado_por: this.authService.getUserUuid(),
      id_modificado_por: this.authService.getUserUuid(),
    }));

    const updateWithUUID = modificados.map((s) => ({
      ...s,
      id_modificado_por: this.authService.getUserUuid(),
      id_creado_por: s.id_creado_por
    }));

    const updateSesiones = `
    mutation ($input: EditarSesiones!) {
      updateSesiones(input: $input) {
        exitoso
        mensaje
      }
    }
  `;

    const variables = {
      input: {
        nuevos: createWithUUID,
        modificados: updateWithUUID,
        eliminados: eliminados,
      },
    };

    try {
      const response = await firstValueFrom(
        this.graphQLService.mutation<{ updateSesiones: GraphQLResponse<{ exitoso: string; mensaje?: string }> }>(
          updateSesiones,
          variables
        )
      );
      return response.updateSesiones;
    } catch (error: unknown) {
      console.error('‚ùå Error en updateSesiones:', error);

      const mensaje =
        typeof error === 'object' && error !== null && 'mensaje' in error
          ? (error as { mensaje?: string }).mensaje
          : 'Error al enviar sesiones';

      return {
        exitoso: "N",
        mensaje: mensaje ?? 'Error al enviar sesiones',
      };
    }
  }
}
